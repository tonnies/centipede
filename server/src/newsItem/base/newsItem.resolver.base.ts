/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNewsItemArgs } from "./CreateNewsItemArgs";
import { UpdateNewsItemArgs } from "./UpdateNewsItemArgs";
import { DeleteNewsItemArgs } from "./DeleteNewsItemArgs";
import { NewsItemFindManyArgs } from "./NewsItemFindManyArgs";
import { NewsItemFindUniqueArgs } from "./NewsItemFindUniqueArgs";
import { NewsItem } from "./NewsItem";
import { Contact } from "../../contact/base/Contact";
import { User } from "../../user/base/User";
import { NewsItemService } from "../newsItem.service";

@graphql.Resolver(() => NewsItem)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class NewsItemResolverBase {
  constructor(
    protected readonly service: NewsItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "read",
    possession: "any",
  })
  async _newsItemsMeta(
    @graphql.Args() args: NewsItemFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NewsItem])
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "read",
    possession: "any",
  })
  async newsItems(
    @graphql.Args() args: NewsItemFindManyArgs
  ): Promise<NewsItem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NewsItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "read",
    possession: "own",
  })
  async newsItem(
    @graphql.Args() args: NewsItemFindUniqueArgs
  ): Promise<NewsItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewsItem)
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "create",
    possession: "any",
  })
  async createNewsItem(
    @graphql.Args() args: CreateNewsItemArgs
  ): Promise<NewsItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        contacts: args.data.contacts
          ? {
              connect: args.data.contacts,
            }
          : undefined,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewsItem)
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "update",
    possession: "any",
  })
  async updateNewsItem(
    @graphql.Args() args: UpdateNewsItemArgs
  ): Promise<NewsItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          contacts: args.data.contacts
            ? {
                connect: args.data.contacts,
              }
            : undefined,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewsItem)
  @nestAccessControl.UseRoles({
    resource: "NewsItem",
    action: "delete",
    possession: "any",
  })
  async deleteNewsItem(
    @graphql.Args() args: DeleteNewsItemArgs
  ): Promise<NewsItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Contact, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Contact",
    action: "read",
    possession: "any",
  })
  async contacts(@graphql.Parent() parent: NewsItem): Promise<Contact | null> {
    const result = await this.service.getContacts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async createdBy(@graphql.Parent() parent: NewsItem): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
