/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDiaryArgs } from "./CreateDiaryArgs";
import { UpdateDiaryArgs } from "./UpdateDiaryArgs";
import { DeleteDiaryArgs } from "./DeleteDiaryArgs";
import { DiaryFindManyArgs } from "./DiaryFindManyArgs";
import { DiaryFindUniqueArgs } from "./DiaryFindUniqueArgs";
import { Diary } from "./Diary";
import { DiaryService } from "../diary.service";

@graphql.Resolver(() => Diary)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DiaryResolverBase {
  constructor(
    protected readonly service: DiaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "read",
    possession: "any",
  })
  async _diariesMeta(
    @graphql.Args() args: DiaryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Diary])
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "read",
    possession: "any",
  })
  async diaries(@graphql.Args() args: DiaryFindManyArgs): Promise<Diary[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Diary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "read",
    possession: "own",
  })
  async diary(
    @graphql.Args() args: DiaryFindUniqueArgs
  ): Promise<Diary | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Diary)
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "create",
    possession: "any",
  })
  async createDiary(@graphql.Args() args: CreateDiaryArgs): Promise<Diary> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Diary)
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "update",
    possession: "any",
  })
  async updateDiary(
    @graphql.Args() args: UpdateDiaryArgs
  ): Promise<Diary | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Diary)
  @nestAccessControl.UseRoles({
    resource: "Diary",
    action: "delete",
    possession: "any",
  })
  async deleteDiary(
    @graphql.Args() args: DeleteDiaryArgs
  ): Promise<Diary | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
